// app/api/auth/login/route.js
import { NextResponse } from "next/server";
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { getSheetData } from "../../config";

export async function POST(request) {
  try {
    const { username, password } = await request.json();

    if (!username || !password) {
      return NextResponse.json(
        { success: false, message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password" },
        { status: 400 }
      );
    }

    const usersData = await getSheetData("users!A:E");

    if (!usersData || usersData.length === 0) {
      return NextResponse.json(
        { success: false, message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" },
        { status: 500 }
      );
    }

    const userRows = usersData.slice(1);
    const userRow = userRows.find(
      (row) => row[0] && row[0].toLowerCase() === username.toLowerCase()
    );

    if (!userRow) {
      return NextResponse.json(
        { success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 401 }
      );
    }

    const hashedPassword = userRow[1];
    const isPasswordValid = await bcrypt.compare(password, hashedPassword);

    if (!isPasswordValid) {
      return NextResponse.json(
        { success: false, message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" },
        { status: 401 }
      );
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
    const payload = {
      username: userRow[0],
      nameuser: userRow[2],
      device: userRow[3] || "",
      role: userRow[4] || "user",
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60),
    };

    const token = jwt.sign(payload, process.env.JWT_SECRET);
    console.log('‚úÖ JWT Token created for user:', userRow[0]);

    // üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Response ‡∏û‡∏£‡πâ‡∏≠‡∏° Cookies
    const response = NextResponse.json({
      success: true,
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: {
        username: userRow[0],
        nameuser: userRow[2],
        device: userRow[3] || "",
        role: userRow[4] || "user",
      },
      token: token,
    });

    // üÜï ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ HTTP-Only Cookie ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    response.cookies.set('auth_token', token, {
      httpOnly: true,        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS
      secure: false,         // false ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö localhost
      sameSite: 'lax',       // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô CSRF
      maxAge: 24 * 60 * 60 * 1000, // 24 hours
      path: '/',
    });

    // üÜï ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ User Info Cookie ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Client
    response.cookies.set('user_info', JSON.stringify({
      username: userRow[0],
      nameuser: userRow[2],
      role: userRow[4] || "user",
      device: userRow[3] || "",
    }), {
      httpOnly: false,       // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ client ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
      secure: false,
      sameSite: 'lax',
      maxAge: 24 * 60 * 60 * 1000,
      path: '/',
    });

    console.log('üç™ Cookies set successfully');
    return response;

  } catch (error) {
    console.error("Login error:", error);
    return NextResponse.json(
      { success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" },
      { status: 500 }
    );
  }
}